import traceback

from pyscript import window, document, display
from pyscript.ffi import create_proxy

from clockchecker import *


apply_btn = document.getElementById("applyButton")


def _stream_solve_to_output(puzzle: Puzzle):
    puzzle.user_interrupt = check_for_user_interrupt
    try:
        world_count = 0
        for world in solve(puzzle):
            world_count += 1
            window.GUI_worldFound(format_world(world))
            if window.stopRequested:
                raise InterruptedError()
        if world_count == 0:
            window.GUI_returnError('No Solutions Found\n')
    except InterruptedError:
        window.GUI_returnError('\n======= Solve Stopped By User =======\n')
    except Exception as e:
        err_msg = '\nError while solving:\n' + traceback.format_exc()
        window.GUI_returnError(err_msg)

def apply_button_handler(event):
    window.GUI_startProcessing()
    puzzle_str = window.codeMirrorEditor.getValue()
    try:
        exec(puzzle_str + "\n_stream_solve_to_output(puzzle)\n")
    except Exception as e:
        msg = traceback.format_exc()
        window.GUI_returnError('Error in input:\n' + msg)
    window.GUI_finishedProcessing()

def keydown_handler(event):
    if (
        event.ctrlKey
        and event.key == 'Enter'
        and apply_btn.style.display != 'none'
    ):
        apply_button_handler(event)


check_count = 0
def check_for_user_interrupt() -> bool:
    global check_count
    check_count += 1
    if check_count % 500 == 0:
        return window.stopRequested
    return False

def format_world(world: State) -> str:
    world = str(world) + '\n'
    world = world.replace('\033[0;1m', '<span>')
    world = world.replace('\033[31;1m', '<span style="color: #ef4444; font-weight: bold;">')
    world = world.replace('\033[34;1m', '<span style="color: #3b78ff; font-weight: bold;">')
    world = world.replace('\033[0m', '</span>')
    return world


apply_proxy = create_proxy(apply_button_handler)
keydown_proxy = create_proxy(keydown_handler)
apply_btn.addEventListener("click", apply_proxy)
document.addEventListener("keydown", keydown_proxy)

# Only display solving button once python worker is initialised
document.getElementById("pythonLoadingMessage").remove()
apply_btn.style.display = 'flex'
